@page "/"
@using System.Text
@using SpellWork.DBC
@using SpellWork.Extensions
@using SpellWork.Models
@using SpellWork.Spell

<!--
<MudDrawer Open="true" ClipMode="DrawerClipMode.Always" Width="450px">
    <MudContainer Class="pa-4">
        <MudNavMenu>
            <MudNavLink Href="/">Spell Info</MudNavLink>
        </MudNavMenu>
    </MudContainer>
</MudDrawer>
-->

<MudGrid>
    <MudItem xs="12" md="6" lg="5" xl="4">
        <MudStack Class="mb-8 mud-width-full">
            <EditForm Model="@_model" OnValidSubmit="PerformSearch" FormName="SpellInfoSearch">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="ID or Name" @bind-Value="_model.IdOrName" For="@(() => _model.IdOrName)"/>
                        <MudSelect @ref="_familySelect" T="SpellFamilyNames?" @bind-Value="_model.Family" Class="mt-4" Label="Family" Clearable="true">
                            @foreach (var type in (SpellFamilyNames[])Enum.GetValues(typeof(SpellFamilyNames)))
                            {
                                <MudSelectItem T="SpellFamilyNames?" Value="@type">(@(((int)type).ToString("000"))) @type.ToString()</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect @ref="_auraSelect" T="AuraType?" @bind-Value="_model.Aura" Class="mt-4" Label="Aura" Clearable="true">
                            @foreach (var type in (AuraType[])Enum.GetValues(typeof(AuraType)))
                            {
                                <MudSelectItem T="AuraType?" Value="@type">(@(((int)type).ToString("000"))) @type.ToString()</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect @ref="_effectSelect" T="SpellEffects?" @bind-Value="_model.Effect" Class="mt-4" Label="Effect" Clearable="true">
                            @foreach (var type in (SpellEffects[])Enum.GetValues(typeof(SpellEffects)))
                            {
                                <MudSelectItem T="SpellEffects?" Value="@type">(@(((int)type).ToString("000"))) @type.ToString()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudCardContent>
                    <MudCardActions>
                        <div class="ml-auto">
                            <MudButton Color="Color.Secondary" OnClick="ResetForm">Reset</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-2 mr-2">Search</MudButton>
                        </div>
                    </MudCardActions>
                </MudCard>
            </EditForm>

            <MudTable T="SpellInfoSearchResult" ServerData="ServerReload" Hover="true" Dense="true" @ref="_table" OnRowClick="RowClickEvent" Class="mt-8">
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortLabel="id_field" T="SpellInfoSearchResult">Id</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="name_field" T="SpellInfoSearchResult">Name</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="miscid_field" T="SpellInfoSearchResult">Misc Id</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.SpellId</MudTd>
                    <MudTd DataLabel="Name">@context.SpellName</MudTd>
                    <MudTd DataLabel="MiscId" HideSmall="true">@context.SpellMiscId</MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText>No matching spells found</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudStack>
    </MudItem>
    <MudItem xs="12" md="6" lg="7" xl="8">
        @if (_selectedSpellId != null)
        {
            <MudPaper Class="pa-4 mud-width-full">
                <MudButton Href="@($"https://wowhead.com/spell={_selectedSpellId}")"
                           Target="_blank"
                           Variant="Variant.Filled"
                           EndIcon="@Icons.Material.Filled.Link"
                           Color="Color.Primary">
                    Wowhead
                </MudButton>
                <MudText Class="mt-2">@_selectedSpellInfo</MudText>
            </MudPaper>
        }
    </MudItem>
</MudGrid>

@code {
    private readonly SpellInfoSearch _model = new();
    private MudTable<SpellInfoSearchResult> _table;
    private MudSelect<SpellFamilyNames?> _familySelect;
    private MudSelect<AuraType?> _auraSelect;
    private MudSelect<SpellEffects?> _effectSelect;
    private int? _selectedSpellId = null;
    private MarkupString _selectedSpellInfo;

    private void PerformSearch(EditContext context)
    {
        _table.ReloadServerData();
    }

    private async Task<TableData<SpellInfoSearchResult>> ServerReload(TableState state, CancellationToken token)
    {
        List<SpellInfoSearchResult> results = [];
        if (_model.HasAnyFilter())
        {
            var id = _model.IdOrName.ToUInt32();
            var name = _model.IdOrName;

            foreach (var entry in DBC.SpellInfoStore)
            {
                var spellInfo = entry.Value;

                if (id != 0 && spellInfo.ID != id)
                {
                    continue;
                }

                if (!string.IsNullOrWhiteSpace(name) && !spellInfo.Name.Contains(name, StringComparison.OrdinalIgnoreCase))
                {
                    continue;
                }

                if (_model.Family.HasValue && spellInfo.SpellFamilyName != (int)_model.Family.Value)
                {
                    continue;
                }

                if (_model.Aura.HasValue && !spellInfo.HasAura(_model.Aura.Value))
                {
                    continue;
                }

                if (_model.Effect.HasValue && !spellInfo.HasEffect(_model.Effect.Value))
                {
                    continue;
                }

                results.Add(new SpellInfoSearchResult(spellInfo));
            }
        }

        IEnumerable<SpellInfoSearchResult> data = results;
        switch (state.SortLabel)
        {
            case "id_field":
                data = data.OrderByDirection(state.SortDirection, r => r.SpellId);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, r => r.SpellName);
                break;
            case "miscid_field":
                data = data.OrderByDirection(state.SortDirection, r => r.SpellMiscId);
                break;
        }

        data = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<SpellInfoSearchResult> { TotalItems = results.Count, Items = data };
    }

    private void RowClickEvent(TableRowClickEventArgs<SpellInfoSearchResult> tableRowClickEventArgs)
    {
        if (tableRowClickEventArgs.Item != null)
        {
            if (!DBC.SpellInfoStore.TryGetValue(tableRowClickEventArgs.Item.SpellId, out var spellInfo))
            {
                return;
            }

            _selectedSpellId = tableRowClickEventArgs.Item.SpellId;

            var sb = new StringBuilder();
            spellInfo.Write(sb);

            _selectedSpellInfo = new MarkupString(sb.ToString().Replace("\n", "<br />"));
        }
        else
        {
            _selectedSpellId = null;
        }
    }

    private void ResetForm()
    {
        _selectedSpellId = null;

        _model.IdOrName = string.Empty;
        _model.Family = null;
        _model.Aura = null;
        _model.Effect = null;

        _familySelect.ClearAsync();
        _auraSelect.ClearAsync();
        _effectSelect.ClearAsync();

        _table.ReloadServerData();
    }
}